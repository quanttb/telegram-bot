{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","useState","telegramBotToken","setTelegramBotToken","telegramChatIDs","setTelegramChatIDs","message","setMessage","fetchChatIDs","a","axios","get","then","response","data","result","length","IDs","chat","my_chat_member","findIndex","c","id","push","title","alert","catch","error","sendMessage","params","chat_id","text","value","onChange","e","target","onClick","readOnly","rows","cols","map","join","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qRAsHeA,EAlHH,SAACC,GAAW,IAAD,EAC2BC,mBAAS,IADpC,mBACdC,EADc,KACIC,EADJ,OAEyBF,mBAAS,IAFlC,mBAEdG,EAFc,KAEGC,EAFH,OAGSJ,mBAAS,IAHlB,mBAGdK,EAHc,KAGLC,EAHK,KAafC,EAAY,uCAAG,sBAAAC,EAAA,0DACfP,EADe,uBAEjBG,EAAmB,IAFF,SAGXK,IACHC,IADG,sCAE6BT,EAF7B,gBAIHU,MAAK,SAAUC,GACd,IAAMC,EAAOD,EAASC,KACtB,GAA2B,IAAvBA,EAAKC,OAAOC,OAAhB,CAKA,IAPwB,EAOlBC,EAAM,GAPY,cASPH,EAAKC,QATE,yBASfG,EATe,QAUlBA,EAAKC,iBACY,IAAfF,EAAID,SAA8E,IAA9DC,EAAIG,WAAU,SAAAC,GAAC,OAAIA,EAAEC,KAAOJ,EAAKC,eAAeD,KAAKI,OAC3EL,EAAIM,KAAK,CACPD,GAAIJ,EAAKC,eAAeD,KAAKI,GAC7BE,MAAON,EAAKC,eAAeD,KAAKM,UALxC,2BAA+B,IATP,8BAmBxBnB,EAAmBY,QAhBjBQ,MAAM,wBAkBTC,OAAM,SAAUC,GACfF,MAAM,aA7BO,6BAgCjBA,MAAM,iCAhCW,2CAAH,qDAoCZG,EAAW,uCAAG,gCAAAnB,EAAA,2DACdH,GAAWJ,GAAoBE,GAAmBA,EAAgBY,OAAS,GAD7D,+BAECZ,GAFD,gEAEPc,EAFO,iBAGRR,IACHC,IADG,sCAE6BT,EAF7B,gBAGF,CACE2B,OAAQ,CACNC,QAASZ,EAAKI,GACdS,KAAMzB,KAIXM,MAAK,SAAUC,OAEfa,OAAM,SAAUC,OAfL,8IAkBhBF,MAAM,SAlBU,wBAoBhBA,MAAM,gBApBU,gEAAH,qDAwBjB,OACE,gCACE,wDACA,gCACE,yDACA,uBACEO,MAAO9B,EACP+B,SA3E6B,SAACC,GACpC/B,EAAoB+B,EAAEC,OAAOH,UA4EzB,wBACEI,QAAS5B,EADX,+BAMF,uBACA,0BACE6B,UAAQ,EACRC,KAAK,IACLC,KAAK,KACLP,MAAO5B,EAAgBoC,KAAI,SAAAlB,GAAE,OAAIA,EAAGE,SAAOiB,KAAK,QAElD,uBACA,8CACA,uBACA,0BACEH,KAAK,KACLC,KAAK,MACLP,MAAO1B,EACP2B,SA7FsB,SAACC,GAC3B3B,EAAW2B,EAAEC,OAAOH,UA8FlB,uBACA,wBACEI,QAASR,EADX,sBCjGSc,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhC,MAAK,YAAkD,IAA/CiC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.4431cf94.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport './App.css';\n\nconst App = (props) => {\n  const [telegramBotToken, setTelegramBotToken] = useState('');\n  const [telegramChatIDs, setTelegramChatIDs] = useState([]);\n  const [message, setMessage] = useState('');\n\n  const handleTelegramBotTokenChange = (e) => {\n    setTelegramBotToken(e.target.value);\n  }\n\n  const handleMessageChange = (e) => {\n    setMessage(e.target.value);\n  }\n\n  const fetchChatIDs = async () => {\n    if (telegramBotToken) {\n      setTelegramChatIDs([]);\n      await axios\n        .get(\n          `https://api.telegram.org/bot${telegramBotToken}/getUpdates`\n        )\n        .then(function (response) {\n          const data = response.data;\n          if (data.result.length === 0) {\n            alert('No Chat ID found!');\n            return;\n          }\n\n          const IDs = [];\n\n          for (let chat of data.result) {\n            if (chat.my_chat_member) {\n              if (IDs.length === 0 || IDs.findIndex(c => c.id === chat.my_chat_member.chat.id) === -1) {\n                IDs.push({\n                  id: chat.my_chat_member.chat.id,\n                  title: chat.my_chat_member.chat.title\n                });\n              }\n            }\n          }\n          setTelegramChatIDs(IDs);\n        })\n        .catch(function (error) {\n          alert('Error!')\n        });\n    } else {\n      alert('Telegram Bot Token not found!');\n    }\n  };\n\n  const sendMessage = async () => {\n    if (message && telegramBotToken && telegramChatIDs && telegramChatIDs.length > 0) {\n      for (let chat of telegramChatIDs) {\n        await axios\n          .get(\n            `https://api.telegram.org/bot${telegramBotToken}/sendMessage`,\n            {\n              params: {\n                chat_id: chat.id,\n                text: message,\n              },\n            },\n          )\n          .then(function (response) {\n          })\n          .catch(function (error) {\n          });\n      }\n      alert('Done!');\n    } else {\n      alert('Cannot send!');\n    }\n  };\n\n  return (\n    <div>\n      <h2>TokenPlay Telegram Bot</h2>\n      <div>\n        <label>Telegram Bot Token: </label>\n        <input\n          value={telegramBotToken}\n          onChange={handleTelegramBotTokenChange}\n        />\n        <button\n          onClick={fetchChatIDs}\n        >\n          Fetch Chat IDs\n        </button>\n      </div>\n      <br/>\n      <textarea\n        readOnly\n        rows=\"5\"\n        cols=\"40\"\n        value={telegramChatIDs.map(id => id.title).join('\\n')}\n      />\n      <br/>\n      <label>Message: </label>\n      <br/>\n      <textarea\n        rows=\"20\"\n        cols=\"100\"\n        value={message}\n        onChange={handleMessageChange}\n      />\n      <br/>\n      <button\n        onClick={sendMessage}\n      >\n        SEND\n      </button>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}